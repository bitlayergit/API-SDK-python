# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class NumberregionsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def list_available_phone_number_regions(self, **kwargs):
        """
        
        This service lists the quantities of available phone numbers by region.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_available_phone_number_regions(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] filters_country_code: Country Code filter
        :param list[str] filters_npa: Area Code filter (North America only)
        :param list[str] filters_nxx: 2nd set of 3 digits filter (North America only)
        :param list[str] filters_is_toll_free: Toll-free status filter
        :param list[str] filters_city: City filter
        :param list[str] filters_province_postal_code: State or Province filter
        :param list[str] filters_country_postal_code: Country filter
        :param str sort_country_code: International calling code sorting
        :param str sort_npa: Area Code sorting (North America only)
        :param str sort_nxx: 2nd set of 3 digits sorting (North America)
        :param str sort_is_toll_free: Toll Free status sorting
        :param str sort_city: City sorting
        :param str sort_province_postal_code: State or Province sorting
        :param str sort_country_postal_code: Country sorting
        :param int limit: Max results
        :param int offset: Results to skip
        :param str fields: Field set
        :param list[str] group_by: Fields to group by (supports the same set of fields as the filters and sorting)
        :return: ListPhoneNumbersRegions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_available_phone_number_regions_with_http_info(**kwargs)
        else:
            (data) = self.list_available_phone_number_regions_with_http_info(**kwargs)
            return data

    def list_available_phone_number_regions_with_http_info(self, **kwargs):
        """
        
        This service lists the quantities of available phone numbers by region.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_available_phone_number_regions_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] filters_country_code: Country Code filter
        :param list[str] filters_npa: Area Code filter (North America only)
        :param list[str] filters_nxx: 2nd set of 3 digits filter (North America only)
        :param list[str] filters_is_toll_free: Toll-free status filter
        :param list[str] filters_city: City filter
        :param list[str] filters_province_postal_code: State or Province filter
        :param list[str] filters_country_postal_code: Country filter
        :param str sort_country_code: International calling code sorting
        :param str sort_npa: Area Code sorting (North America only)
        :param str sort_nxx: 2nd set of 3 digits sorting (North America)
        :param str sort_is_toll_free: Toll Free status sorting
        :param str sort_city: City sorting
        :param str sort_province_postal_code: State or Province sorting
        :param str sort_country_postal_code: Country sorting
        :param int limit: Max results
        :param int offset: Results to skip
        :param str fields: Field set
        :param list[str] group_by: Fields to group by (supports the same set of fields as the filters and sorting)
        :return: ListPhoneNumbersRegions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filters_country_code', 'filters_npa', 'filters_nxx', 'filters_is_toll_free', 'filters_city', 'filters_province_postal_code', 'filters_country_postal_code', 'sort_country_code', 'sort_npa', 'sort_nxx', 'sort_is_toll_free', 'sort_city', 'sort_province_postal_code', 'sort_country_postal_code', 'limit', 'offset', 'fields', 'group_by']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_available_phone_number_regions" % key
                )
            params[key] = val
        del params['kwargs']

        if 'sort_npa' in params and not re.search('asc|desc', params['sort_npa']):
            raise ValueError("Invalid value for parameter `sort_npa` when calling `list_available_phone_number_regions`, must conform to the pattern `/asc|desc/`")
        if 'sort_nxx' in params and not re.search('asc|desc', params['sort_nxx']):
            raise ValueError("Invalid value for parameter `sort_nxx` when calling `list_available_phone_number_regions`, must conform to the pattern `/asc|desc/`")
        if 'sort_is_toll_free' in params and not re.search('asc|desc', params['sort_is_toll_free']):
            raise ValueError("Invalid value for parameter `sort_is_toll_free` when calling `list_available_phone_number_regions`, must conform to the pattern `/asc|desc/`")
        if 'sort_city' in params and not re.search('asc|desc', params['sort_city']):
            raise ValueError("Invalid value for parameter `sort_city` when calling `list_available_phone_number_regions`, must conform to the pattern `/asc|desc/`")
        if 'sort_province_postal_code' in params and not re.search('asc|desc', params['sort_province_postal_code']):
            raise ValueError("Invalid value for parameter `sort_province_postal_code` when calling `list_available_phone_number_regions`, must conform to the pattern `/asc|desc/`")
        if 'sort_country_postal_code' in params and not re.search('asc|desc', params['sort_country_postal_code']):
            raise ValueError("Invalid value for parameter `sort_country_postal_code` when calling `list_available_phone_number_regions`, must conform to the pattern `/asc|desc/`")

        collection_formats = {}

        resource_path = '/phone-numbers/available/regions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'filters_country_code' in params:
            query_params['filters[country_code]'] = params['filters_country_code']
            collection_formats['filters[country_code]'] = 'multi'
        if 'filters_npa' in params:
            query_params['filters[npa]'] = params['filters_npa']
            collection_formats['filters[npa]'] = 'multi'
        if 'filters_nxx' in params:
            query_params['filters[nxx]'] = params['filters_nxx']
            collection_formats['filters[nxx]'] = 'multi'
        if 'filters_is_toll_free' in params:
            query_params['filters[is_toll_free]'] = params['filters_is_toll_free']
            collection_formats['filters[is_toll_free]'] = 'multi'
        if 'filters_city' in params:
            query_params['filters[city]'] = params['filters_city']
            collection_formats['filters[city]'] = 'multi'
        if 'filters_province_postal_code' in params:
            query_params['filters[province_postal_code]'] = params['filters_province_postal_code']
            collection_formats['filters[province_postal_code]'] = 'multi'
        if 'filters_country_postal_code' in params:
            query_params['filters[country_postal_code]'] = params['filters_country_postal_code']
            collection_formats['filters[country_postal_code]'] = 'csv'
        if 'sort_country_code' in params:
            query_params['sort[country_code]'] = params['sort_country_code']
        if 'sort_npa' in params:
            query_params['sort[npa]'] = params['sort_npa']
        if 'sort_nxx' in params:
            query_params['sort[nxx]'] = params['sort_nxx']
        if 'sort_is_toll_free' in params:
            query_params['sort[is_toll_free]'] = params['sort_is_toll_free']
        if 'sort_city' in params:
            query_params['sort[city]'] = params['sort_city']
        if 'sort_province_postal_code' in params:
            query_params['sort[province_postal_code]'] = params['sort_province_postal_code']
        if 'sort_country_postal_code' in params:
            query_params['sort[country_postal_code]'] = params['sort_country_postal_code']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'offset' in params:
            query_params['offset'] = params['offset']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'group_by' in params:
            query_params['group_by'] = params['group_by']
            collection_formats['group_by'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['apiKey']

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ListPhoneNumbersRegions',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
