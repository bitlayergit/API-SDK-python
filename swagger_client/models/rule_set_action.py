# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RuleSetAction(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, action=None, extension=None, items=None, timeout=None, hold_music=None, greeting=None, duration=None, menu=None, queue=None, trunk=None):
        """
        RuleSetAction - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'action': 'str',
            'extension': 'ExtensionSummary',
            'items': 'list[RuleSetForwardItem]',
            'timeout': 'int',
            'hold_music': 'MediaSummary',
            'greeting': 'MediaSummary',
            'duration': 'int',
            'menu': 'MenuSummary',
            'queue': 'QueueSummary',
            'trunk': 'TrunkSummary'
        }

        self.attribute_map = {
            'action': 'action',
            'extension': 'extension',
            'items': 'items',
            'timeout': 'timeout',
            'hold_music': 'hold_music',
            'greeting': 'greeting',
            'duration': 'duration',
            'menu': 'menu',
            'queue': 'queue',
            'trunk': 'trunk'
        }

        self._action = action
        self._extension = extension
        self._items = items
        self._timeout = timeout
        self._hold_music = hold_music
        self._greeting = greeting
        self._duration = duration
        self._menu = menu
        self._queue = queue
        self._trunk = trunk

    @property
    def action(self):
        """
        Gets the action of this RuleSetAction.
        Required.

        :return: The action of this RuleSetAction.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this RuleSetAction.
        Required.

        :param action: The action of this RuleSetAction.
        :type: str
        """
        if action is not None and not re.search('directory|disconnect|fax|forward|greeting|hold|menu|queue|trunk|voicemail', action):
            raise ValueError("Invalid value for `action`, must be a follow pattern or equal to `/directory|disconnect|fax|forward|greeting|hold|menu|queue|trunk|voicemail/`")

        self._action = action

    @property
    def extension(self):
        """
        Gets the extension of this RuleSetAction.
        Extension that this action refers to. Output is an Extension Summary Object. Input must be an Extension Lookup Object. Required.

        :return: The extension of this RuleSetAction.
        :rtype: ExtensionSummary
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """
        Sets the extension of this RuleSetAction.
        Extension that this action refers to. Output is an Extension Summary Object. Input must be an Extension Lookup Object. Required.

        :param extension: The extension of this RuleSetAction.
        :type: ExtensionSummary
        """

        self._extension = extension

    @property
    def items(self):
        """
        Gets the items of this RuleSetAction.
        This action is for forwarding calls to any number of extensions or phone numbers. The forwarding is handled in parallel, meaning that all phone numbers and/or extensions will ring simultaneously. When the call is answered by any single phone number or extension, ringing will stop for all of them. Subsequent actions in this rule set will be performed if the call is not answered before the timeout period is reached, or if it is forwarded to an extension that has its own route and that route does not result in any actions that disconnect the call or take over call handling.

        :return: The items of this RuleSetAction.
        :rtype: list[RuleSetForwardItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """
        Sets the items of this RuleSetAction.
        This action is for forwarding calls to any number of extensions or phone numbers. The forwarding is handled in parallel, meaning that all phone numbers and/or extensions will ring simultaneously. When the call is answered by any single phone number or extension, ringing will stop for all of them. Subsequent actions in this rule set will be performed if the call is not answered before the timeout period is reached, or if it is forwarded to an extension that has its own route and that route does not result in any actions that disconnect the call or take over call handling.

        :param items: The items of this RuleSetAction.
        :type: list[RuleSetForwardItem]
        """

        self._items = items

    @property
    def timeout(self):
        """
        Gets the timeout of this RuleSetAction.
        Seconds that our routing engine should wait until moving on. Optional. Must be an integer between 5 and 90. Default is 5 seconds.

        :return: The timeout of this RuleSetAction.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this RuleSetAction.
        Seconds that our routing engine should wait until moving on. Optional. Must be an integer between 5 and 90. Default is 5 seconds.

        :param timeout: The timeout of this RuleSetAction.
        :type: int
        """

        self._timeout = timeout

    @property
    def hold_music(self):
        """
        Gets the hold_music of this RuleSetAction.
        Hold Music to be played while callers are waiting. Output is a Media Summary Object. Input must be a Media Lookup Object. Optional. Must refer to a media recording that has is_hold_music set to TRUE. Default is to play a standard ring tone.

        :return: The hold_music of this RuleSetAction.
        :rtype: MediaSummary
        """
        return self._hold_music

    @hold_music.setter
    def hold_music(self, hold_music):
        """
        Sets the hold_music of this RuleSetAction.
        Hold Music to be played while callers are waiting. Output is a Media Summary Object. Input must be a Media Lookup Object. Optional. Must refer to a media recording that has is_hold_music set to TRUE. Default is to play a standard ring tone.

        :param hold_music: The hold_music of this RuleSetAction.
        :type: MediaSummary
        """

        self._hold_music = hold_music

    @property
    def greeting(self):
        """
        Gets the greeting of this RuleSetAction.
        Greeting that this action refers to. Output is a Media Summary Object. Input must be a Media Lookup Object. Required. Must refer to a media recording that has is_hold_music set to FALSE.

        :return: The greeting of this RuleSetAction.
        :rtype: MediaSummary
        """
        return self._greeting

    @greeting.setter
    def greeting(self, greeting):
        """
        Sets the greeting of this RuleSetAction.
        Greeting that this action refers to. Output is a Media Summary Object. Input must be a Media Lookup Object. Required. Must refer to a media recording that has is_hold_music set to FALSE.

        :param greeting: The greeting of this RuleSetAction.
        :type: MediaSummary
        """

        self._greeting = greeting

    @property
    def duration(self):
        """
        Gets the duration of this RuleSetAction.
        Required. Seconds that the caller should be placed on hold before being moved onto the next action. Must be an integer between 1 and 60 seconds.

        :return: The duration of this RuleSetAction.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this RuleSetAction.
        Required. Seconds that the caller should be placed on hold before being moved onto the next action. Must be an integer between 1 and 60 seconds.

        :param duration: The duration of this RuleSetAction.
        :type: int
        """

        self._duration = duration

    @property
    def menu(self):
        """
        Gets the menu of this RuleSetAction.
        Menu that this action refers to. Required. Output is a Menu Summary Object. Input must be a Menu Lookup Object.

        :return: The menu of this RuleSetAction.
        :rtype: MenuSummary
        """
        return self._menu

    @menu.setter
    def menu(self, menu):
        """
        Sets the menu of this RuleSetAction.
        Menu that this action refers to. Required. Output is a Menu Summary Object. Input must be a Menu Lookup Object.

        :param menu: The menu of this RuleSetAction.
        :type: MenuSummary
        """

        self._menu = menu

    @property
    def queue(self):
        """
        Gets the queue of this RuleSetAction.
        Queue that this action refers to. Required. Output is a Queue Summary Object. Input must be a Queue Lookup Object.

        :return: The queue of this RuleSetAction.
        :rtype: QueueSummary
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """
        Sets the queue of this RuleSetAction.
        Queue that this action refers to. Required. Output is a Queue Summary Object. Input must be a Queue Lookup Object.

        :param queue: The queue of this RuleSetAction.
        :type: QueueSummary
        """

        self._queue = queue

    @property
    def trunk(self):
        """
        Gets the trunk of this RuleSetAction.
        Trunk that this action refers to. Required. Output is a Trunk Summary Object. Input must be a Trunk Lookup Object.

        :return: The trunk of this RuleSetAction.
        :rtype: TrunkSummary
        """
        return self._trunk

    @trunk.setter
    def trunk(self, trunk):
        """
        Sets the trunk of this RuleSetAction.
        Trunk that this action refers to. Required. Output is a Trunk Summary Object. Input must be a Trunk Lookup Object.

        :param trunk: The trunk of this RuleSetAction.
        :type: TrunkSummary
        """

        self._trunk = trunk

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RuleSetAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
