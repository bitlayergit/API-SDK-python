# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AccountFull(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, username=None, password=None, master_account=None, contact=None, billing_contact=None):
        """
        AccountFull - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'username': 'str',
            'password': 'str',
            'master_account': 'AccountSummary',
            'contact': 'ContactAccount',
            'billing_contact': 'ContactAccount'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'username': 'username',
            'password': 'password',
            'master_account': 'master_account',
            'contact': 'contact',
            'billing_contact': 'billing_contact'
        }

        self._id = id
        self._name = name
        self._username = username
        self._password = password
        self._master_account = master_account
        self._contact = contact
        self._billing_contact = billing_contact

    @property
    def id(self):
        """
        Gets the id of this AccountFull.
        Account ID. Sometimes referred to as \"Voip ID\" or \"voip_id\".

        :return: The id of this AccountFull.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AccountFull.
        Account ID. Sometimes referred to as \"Voip ID\" or \"voip_id\".

        :param id: The id of this AccountFull.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this AccountFull.
        Name on the account. Read-only.

        :return: The name of this AccountFull.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AccountFull.
        Name on the account. Read-only.

        :param name: The name of this AccountFull.
        :type: str
        """

        self._name = name

    @property
    def username(self):
        """
        Gets the username of this AccountFull.
        Account user name

        :return: The username of this AccountFull.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this AccountFull.
        Account user name

        :param username: The username of this AccountFull.
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """
        Gets the password of this AccountFull.
        Account password. For security reason, this is masked as \"**\"

        :return: The password of this AccountFull.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this AccountFull.
        Account password. For security reason, this is masked as \"**\"

        :param password: The password of this AccountFull.
        :type: str
        """

        self._password = password

    @property
    def master_account(self):
        """
        Gets the master_account of this AccountFull.
        If this account is a subaccount, this property shows the master account that it belongs to. Otherwise it is NULL. Read-only. Output is an Account Summary Object.

        :return: The master_account of this AccountFull.
        :rtype: AccountSummary
        """
        return self._master_account

    @master_account.setter
    def master_account(self, master_account):
        """
        Sets the master_account of this AccountFull.
        If this account is a subaccount, this property shows the master account that it belongs to. Otherwise it is NULL. Read-only. Output is an Account Summary Object.

        :param master_account: The master_account of this AccountFull.
        :type: AccountSummary
        """

        self._master_account = master_account

    @property
    def contact(self):
        """
        Gets the contact of this AccountFull.
        Contact Object. See below for details.

        :return: The contact of this AccountFull.
        :rtype: ContactAccount
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """
        Sets the contact of this AccountFull.
        Contact Object. See below for details.

        :param contact: The contact of this AccountFull.
        :type: ContactAccount
        """

        self._contact = contact

    @property
    def billing_contact(self):
        """
        Gets the billing_contact of this AccountFull.
        Contact Object for billing purposes. See below for details.

        :return: The billing_contact of this AccountFull.
        :rtype: ContactAccount
        """
        return self._billing_contact

    @billing_contact.setter
    def billing_contact(self, billing_contact):
        """
        Sets the billing_contact of this AccountFull.
        Contact Object for billing purposes. See below for details.

        :param billing_contact: The billing_contact of this AccountFull.
        :type: ContactAccount
        """

        self._billing_contact = billing_contact

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AccountFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
