# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AddressListContacts(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, street=None, city=None, state=None, zip=None, country=None):
        """
        AddressListContacts - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'street': 'str',
            'city': 'str',
            'state': 'str',
            'zip': 'str',
            'country': 'str'
        }

        self.attribute_map = {
            'type': 'type',
            'street': 'street',
            'city': 'city',
            'state': 'state',
            'zip': 'zip',
            'country': 'country'
        }

        self._type = type
        self._street = street
        self._city = city
        self._state = state
        self._zip = zip
        self._country = country

    @property
    def type(self):
        """
        Gets the type of this AddressListContacts.
        Address type, one of: home or business. Default is home.

        :return: The type of this AddressListContacts.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this AddressListContacts.
        Address type, one of: home or business. Default is home.

        :param type: The type of this AddressListContacts.
        :type: str
        """

        self._type = type

    @property
    def street(self):
        """
        Gets the street of this AddressListContacts.
        House number and street name, including apartment, suite, etc.

        :return: The street of this AddressListContacts.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """
        Sets the street of this AddressListContacts.
        House number and street name, including apartment, suite, etc.

        :param street: The street of this AddressListContacts.
        :type: str
        """

        self._street = street

    @property
    def city(self):
        """
        Gets the city of this AddressListContacts.
        City

        :return: The city of this AddressListContacts.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this AddressListContacts.
        City

        :param city: The city of this AddressListContacts.
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """
        Gets the state of this AddressListContacts.
        State or province

        :return: The state of this AddressListContacts.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this AddressListContacts.
        State or province

        :param state: The state of this AddressListContacts.
        :type: str
        """

        self._state = state

    @property
    def zip(self):
        """
        Gets the zip of this AddressListContacts.
        Zip code or postal code

        :return: The zip of this AddressListContacts.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """
        Sets the zip of this AddressListContacts.
        Zip code or postal code

        :param zip: The zip of this AddressListContacts.
        :type: str
        """

        self._zip = zip

    @property
    def country(self):
        """
        Gets the country of this AddressListContacts.
        Country name

        :return: The country of this AddressListContacts.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this AddressListContacts.
        Country name

        :param country: The country of this AddressListContacts.
        :type: str
        """

        self._country = country

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AddressListContacts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
