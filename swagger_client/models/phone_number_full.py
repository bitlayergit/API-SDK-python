# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PhoneNumberFull(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'phone_number': 'str',
        'block_incoming': 'bool',
        'block_anonymous': 'bool',
        'route': 'RouteSummary',
        'caller_id': 'CallerIdPhoneNumber',
        'sms_forwarding': 'SmsForwarding',
        'call_notifications': 'CallNotifications'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'phone_number': 'phone_number',
        'block_incoming': 'block_incoming',
        'block_anonymous': 'block_anonymous',
        'route': 'route',
        'caller_id': 'caller_id',
        'sms_forwarding': 'sms_forwarding',
        'call_notifications': 'call_notifications'
    }

    def __init__(self, id=None, name=None, phone_number=None, block_incoming=None, block_anonymous=None, route=None, caller_id=None, sms_forwarding=None, call_notifications=None):
        """
        PhoneNumberFull - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._phone_number = None
        self._block_incoming = None
        self._block_anonymous = None
        self._route = None
        self._caller_id = None
        self._sms_forwarding = None
        self._call_notifications = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if phone_number is not None:
          self.phone_number = phone_number
        if block_incoming is not None:
          self.block_incoming = block_incoming
        if block_anonymous is not None:
          self.block_anonymous = block_anonymous
        if route is not None:
          self.route = route
        if caller_id is not None:
          self.caller_id = caller_id
        if sms_forwarding is not None:
          self.sms_forwarding = sms_forwarding
        if call_notifications is not None:
          self.call_notifications = call_notifications

    @property
    def id(self):
        """
        Gets the id of this PhoneNumberFull.
        Integer Phone number ID. This is the internal Phone.com ID for this number, not the phone number itself. Read-only.

        :return: The id of this PhoneNumberFull.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PhoneNumberFull.
        Integer Phone number ID. This is the internal Phone.com ID for this number, not the phone number itself. Read-only.

        :param id: The id of this PhoneNumberFull.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this PhoneNumberFull.
        Name

        :return: The name of this PhoneNumberFull.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PhoneNumberFull.
        Name

        :param name: The name of this PhoneNumberFull.
        :type: str
        """

        self._name = name

    @property
    def phone_number(self):
        """
        Gets the phone_number of this PhoneNumberFull.
        Phone number, in E.164 format

        :return: The phone_number of this PhoneNumberFull.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """
        Sets the phone_number of this PhoneNumberFull.
        Phone number, in E.164 format

        :param phone_number: The phone_number of this PhoneNumberFull.
        :type: str
        """

        self._phone_number = phone_number

    @property
    def block_incoming(self):
        """
        Gets the block_incoming of this PhoneNumberFull.
        Whether to block incoming calls. Boolean.

        :return: The block_incoming of this PhoneNumberFull.
        :rtype: bool
        """
        return self._block_incoming

    @block_incoming.setter
    def block_incoming(self, block_incoming):
        """
        Sets the block_incoming of this PhoneNumberFull.
        Whether to block incoming calls. Boolean.

        :param block_incoming: The block_incoming of this PhoneNumberFull.
        :type: bool
        """

        self._block_incoming = block_incoming

    @property
    def block_anonymous(self):
        """
        Gets the block_anonymous of this PhoneNumberFull.
        Whether to block anonymous calls. Boolean.

        :return: The block_anonymous of this PhoneNumberFull.
        :rtype: bool
        """
        return self._block_anonymous

    @block_anonymous.setter
    def block_anonymous(self, block_anonymous):
        """
        Sets the block_anonymous of this PhoneNumberFull.
        Whether to block anonymous calls. Boolean.

        :param block_anonymous: The block_anonymous of this PhoneNumberFull.
        :type: bool
        """

        self._block_anonymous = block_anonymous

    @property
    def route(self):
        """
        Gets the route of this PhoneNumberFull.
        The Route assigned to handle incoming calls for this number, if any. Output is a Route Summary Object, or NULL if not set. Input can be a Route Lookup Object or NULL to unset.

        :return: The route of this PhoneNumberFull.
        :rtype: RouteSummary
        """
        return self._route

    @route.setter
    def route(self, route):
        """
        Sets the route of this PhoneNumberFull.
        The Route assigned to handle incoming calls for this number, if any. Output is a Route Summary Object, or NULL if not set. Input can be a Route Lookup Object or NULL to unset.

        :param route: The route of this PhoneNumberFull.
        :type: RouteSummary
        """

        self._route = route

    @property
    def caller_id(self):
        """
        Gets the caller_id of this PhoneNumberFull.

        :return: The caller_id of this PhoneNumberFull.
        :rtype: CallerIdPhoneNumber
        """
        return self._caller_id

    @caller_id.setter
    def caller_id(self, caller_id):
        """
        Sets the caller_id of this PhoneNumberFull.

        :param caller_id: The caller_id of this PhoneNumberFull.
        :type: CallerIdPhoneNumber
        """

        self._caller_id = caller_id

    @property
    def sms_forwarding(self):
        """
        Gets the sms_forwarding of this PhoneNumberFull.

        :return: The sms_forwarding of this PhoneNumberFull.
        :rtype: SmsForwarding
        """
        return self._sms_forwarding

    @sms_forwarding.setter
    def sms_forwarding(self, sms_forwarding):
        """
        Sets the sms_forwarding of this PhoneNumberFull.

        :param sms_forwarding: The sms_forwarding of this PhoneNumberFull.
        :type: SmsForwarding
        """

        self._sms_forwarding = sms_forwarding

    @property
    def call_notifications(self):
        """
        Gets the call_notifications of this PhoneNumberFull.

        :return: The call_notifications of this PhoneNumberFull.
        :rtype: CallNotifications
        """
        return self._call_notifications

    @call_notifications.setter
    def call_notifications(self, call_notifications):
        """
        Sets the call_notifications of this PhoneNumberFull.

        :param call_notifications: The call_notifications of this PhoneNumberFull.
        :type: CallNotifications
        """

        self._call_notifications = call_notifications

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PhoneNumberFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
