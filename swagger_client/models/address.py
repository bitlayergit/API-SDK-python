# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Address(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, line_1=None, line_2=None, city=None, province=None, postal_code=None, country=None):
        """
        Address - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'line_1': 'str',
            'line_2': 'str',
            'city': 'str',
            'province': 'str',
            'postal_code': 'str',
            'country': 'str'
        }

        self.attribute_map = {
            'line_1': 'line_1',
            'line_2': 'line_2',
            'city': 'city',
            'province': 'province',
            'postal_code': 'postal_code',
            'country': 'country'
        }

        self._line_1 = line_1
        self._line_2 = line_2
        self._city = city
        self._province = province
        self._postal_code = postal_code
        self._country = country

    @property
    def line_1(self):
        """
        Gets the line_1 of this Address.
        Street address line 1. Required.

        :return: The line_1 of this Address.
        :rtype: str
        """
        return self._line_1

    @line_1.setter
    def line_1(self, line_1):
        """
        Sets the line_1 of this Address.
        Street address line 1. Required.

        :param line_1: The line_1 of this Address.
        :type: str
        """
        if line_1 is None:
            raise ValueError("Invalid value for `line_1`, must not be `None`")

        self._line_1 = line_1

    @property
    def line_2(self):
        """
        Gets the line_2 of this Address.
        Street address line 2

        :return: The line_2 of this Address.
        :rtype: str
        """
        return self._line_2

    @line_2.setter
    def line_2(self, line_2):
        """
        Sets the line_2 of this Address.
        Street address line 2

        :param line_2: The line_2 of this Address.
        :type: str
        """

        self._line_2 = line_2

    @property
    def city(self):
        """
        Gets the city of this Address.
        City. Required.

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this Address.
        City. Required.

        :param city: The city of this Address.
        :type: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def province(self):
        """
        Gets the province of this Address.
        Province. Required if country is US

        :return: The province of this Address.
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """
        Sets the province of this Address.
        Province. Required if country is US

        :param province: The province of this Address.
        :type: str
        """

        self._province = province

    @property
    def postal_code(self):
        """
        Gets the postal_code of this Address.
        Postal code

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """
        Sets the postal_code of this Address.
        Postal code

        :param postal_code: The postal_code of this Address.
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """
        Gets the country of this Address.
        2-character country code. Required.

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this Address.
        2-character country code. Required.

        :param country: The country of this Address.
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
