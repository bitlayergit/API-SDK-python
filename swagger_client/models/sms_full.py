# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class SmsFull(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        '_from': 'str',
        'to': 'list[Recipient]',
        'direction': 'str',
        'created_epoch': 'int',
        'created_at': 'datetime',
        'text': 'str',
        'is_new': 'bool'
    }

    attribute_map = {
        'id': 'id',
        '_from': 'from',
        'to': 'to',
        'direction': 'direction',
        'created_epoch': 'created_epoch',
        'created_at': 'created_at',
        'text': 'text',
        'is_new': 'is_new'
    }

    def __init__(self, id=None, _from=None, to=None, direction=None, created_epoch=None, created_at=None, text=None, is_new=None):
        """
        SmsFull - a model defined in Swagger
        """

        self._id = None
        self.__from = None
        self._to = None
        self._direction = None
        self._created_epoch = None
        self._created_at = None
        self._text = None
        self._is_new = None

        if id is not None:
          self.id = id
        if _from is not None:
          self._from = _from
        if to is not None:
          self.to = to
        if direction is not None:
          self.direction = direction
        if created_epoch is not None:
          self.created_epoch = created_epoch
        if created_at is not None:
          self.created_at = created_at
        if text is not None:
          self.text = text
        if is_new is not None:
          self.is_new = is_new

    @property
    def id(self):
        """
        Gets the id of this SmsFull.
        Unique SMS ID. Read-only.

        :return: The id of this SmsFull.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SmsFull.
        Unique SMS ID. Read-only.

        :param id: The id of this SmsFull.
        :type: str
        """

        self._id = id

    @property
    def _from(self):
        """
        Gets the _from of this SmsFull.
        Caller ID number to display on the incoming/outgoing SMS message. For an outgoing message, it must be a phone number associated with your Phone.com account.

        :return: The _from of this SmsFull.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """
        Sets the _from of this SmsFull.
        Caller ID number to display on the incoming/outgoing SMS message. For an outgoing message, it must be a phone number associated with your Phone.com account.

        :param _from: The _from of this SmsFull.
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """
        Gets the to of this SmsFull.
        An array of SMS recipients.

        :return: The to of this SmsFull.
        :rtype: list[Recipient]
        """
        return self._to

    @to.setter
    def to(self, to):
        """
        Sets the to of this SmsFull.
        An array of SMS recipients.

        :param to: The to of this SmsFull.
        :type: list[Recipient]
        """

        self._to = to

    @property
    def direction(self):
        """
        Gets the direction of this SmsFull.
        Direction of SMS. 'in' for Incoming messages, 'out' for Outgoing messages.

        :return: The direction of this SmsFull.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this SmsFull.
        Direction of SMS. 'in' for Incoming messages, 'out' for Outgoing messages.

        :param direction: The direction of this SmsFull.
        :type: str
        """

        self._direction = direction

    @property
    def created_epoch(self):
        """
        Gets the created_epoch of this SmsFull.
        Unix time stamp representing the UTC time that the object was created in the Phone.com API system.

        :return: The created_epoch of this SmsFull.
        :rtype: int
        """
        return self._created_epoch

    @created_epoch.setter
    def created_epoch(self, created_epoch):
        """
        Sets the created_epoch of this SmsFull.
        Unix time stamp representing the UTC time that the object was created in the Phone.com API system.

        :param created_epoch: The created_epoch of this SmsFull.
        :type: int
        """

        self._created_epoch = created_epoch

    @property
    def created_at(self):
        """
        Gets the created_at of this SmsFull.
        Date string representing the UTC time that the object was created in the Phone.com API system.

        :return: The created_at of this SmsFull.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this SmsFull.
        Date string representing the UTC time that the object was created in the Phone.com API system.

        :param created_at: The created_at of this SmsFull.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def text(self):
        """
        Gets the text of this SmsFull.
        Body of the SMS text

        :return: The text of this SmsFull.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this SmsFull.
        Body of the SMS text

        :param text: The text of this SmsFull.
        :type: str
        """

        self._text = text

    @property
    def is_new(self):
        """
        Gets the is_new of this SmsFull.
        True when SMS is new; False when SMS has been read.

        :return: The is_new of this SmsFull.
        :rtype: bool
        """
        return self._is_new

    @is_new.setter
    def is_new(self, is_new):
        """
        Sets the is_new of this SmsFull.
        True when SMS is new; False when SMS has been read.

        :param is_new: The is_new of this SmsFull.
        :type: bool
        """

        self._is_new = is_new

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SmsFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
