# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PaymentSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'voip_id': 'int',
        'status': 'str',
        'nickname': 'str',
        'type': 'str',
        'created_at': 'int'
    }

    attribute_map = {
        'id': 'id',
        'voip_id': 'voip_id',
        'status': 'status',
        'nickname': 'nickname',
        'type': 'type',
        'created_at': 'created_at'
    }

    def __init__(self, id=None, voip_id=None, status=None, nickname=None, type=None, created_at=None):
        """
        PaymentSummary - a model defined in Swagger
        """

        self._id = None
        self._voip_id = None
        self._status = None
        self._nickname = None
        self._type = None
        self._created_at = None

        if id is not None:
          self.id = id
        if voip_id is not None:
          self.voip_id = voip_id
        if status is not None:
          self.status = status
        if nickname is not None:
          self.nickname = nickname
        if type is not None:
          self.type = type
        if created_at is not None:
          self.created_at = created_at

    @property
    def id(self):
        """
        Gets the id of this PaymentSummary.
        Payment Method ID

        :return: The id of this PaymentSummary.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PaymentSummary.
        Payment Method ID

        :param id: The id of this PaymentSummary.
        :type: int
        """

        self._id = id

    @property
    def voip_id(self):
        """
        Gets the voip_id of this PaymentSummary.
        API Account ID

        :return: The voip_id of this PaymentSummary.
        :rtype: int
        """
        return self._voip_id

    @voip_id.setter
    def voip_id(self, voip_id):
        """
        Sets the voip_id of this PaymentSummary.
        API Account ID

        :param voip_id: The voip_id of this PaymentSummary.
        :type: int
        """

        self._voip_id = voip_id

    @property
    def status(self):
        """
        Gets the status of this PaymentSummary.
        'primary' = primary card used for billing; 'onfile' = card on file; 'hidden' = deleted card;

        :return: The status of this PaymentSummary.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this PaymentSummary.
        'primary' = primary card used for billing; 'onfile' = card on file; 'hidden' = deleted card;

        :param status: The status of this PaymentSummary.
        :type: str
        """

        self._status = status

    @property
    def nickname(self):
        """
        Gets the nickname of this PaymentSummary.
        Name of Card

        :return: The nickname of this PaymentSummary.
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """
        Sets the nickname of this PaymentSummary.
        Name of Card

        :param nickname: The nickname of this PaymentSummary.
        :type: str
        """

        self._nickname = nickname

    @property
    def type(self):
        """
        Gets the type of this PaymentSummary.
        'cc' for credit card

        :return: The type of this PaymentSummary.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PaymentSummary.
        'cc' for credit card

        :param type: The type of this PaymentSummary.
        :type: str
        """

        self._type = type

    @property
    def created_at(self):
        """
        Gets the created_at of this PaymentSummary.
        Time payment record is created

        :return: The created_at of this PaymentSummary.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this PaymentSummary.
        Time payment record is created

        :param created_at: The created_at of this PaymentSummary.
        :type: int
        """

        self._created_at = created_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PaymentSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
