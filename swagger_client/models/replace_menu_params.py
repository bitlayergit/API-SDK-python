# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReplaceMenuParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, greeting=None, invalid_keypress=None, allow_extension_dial=None, keypress_wait_time=None, timeout_handler=None, options=None):
        """
        ReplaceMenuParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'greeting': 'object',
            'invalid_keypress': 'object',
            'allow_extension_dial': 'bool',
            'keypress_wait_time': 'int',
            'timeout_handler': 'object',
            'options': 'list[object]'
        }

        self.attribute_map = {
            'name': 'name',
            'greeting': 'greeting',
            'invalid_keypress': 'invalid_keypress',
            'allow_extension_dial': 'allow_extension_dial',
            'keypress_wait_time': 'keypress_wait_time',
            'timeout_handler': 'timeout_handler',
            'options': 'options'
        }

        self._name = name
        self._greeting = greeting
        self._invalid_keypress = invalid_keypress
        self._allow_extension_dial = allow_extension_dial
        self._keypress_wait_time = keypress_wait_time
        self._timeout_handler = timeout_handler
        self._options = options

    @property
    def name(self):
        """
        Gets the name of this ReplaceMenuParams.

        :return: The name of this ReplaceMenuParams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ReplaceMenuParams.

        :param name: The name of this ReplaceMenuParams.
        :type: str
        """

        self._name = name

    @property
    def greeting(self):
        """
        Gets the greeting of this ReplaceMenuParams.

        :return: The greeting of this ReplaceMenuParams.
        :rtype: object
        """
        return self._greeting

    @greeting.setter
    def greeting(self, greeting):
        """
        Sets the greeting of this ReplaceMenuParams.

        :param greeting: The greeting of this ReplaceMenuParams.
        :type: object
        """

        self._greeting = greeting

    @property
    def invalid_keypress(self):
        """
        Gets the invalid_keypress of this ReplaceMenuParams.

        :return: The invalid_keypress of this ReplaceMenuParams.
        :rtype: object
        """
        return self._invalid_keypress

    @invalid_keypress.setter
    def invalid_keypress(self, invalid_keypress):
        """
        Sets the invalid_keypress of this ReplaceMenuParams.

        :param invalid_keypress: The invalid_keypress of this ReplaceMenuParams.
        :type: object
        """

        self._invalid_keypress = invalid_keypress

    @property
    def allow_extension_dial(self):
        """
        Gets the allow_extension_dial of this ReplaceMenuParams.

        :return: The allow_extension_dial of this ReplaceMenuParams.
        :rtype: bool
        """
        return self._allow_extension_dial

    @allow_extension_dial.setter
    def allow_extension_dial(self, allow_extension_dial):
        """
        Sets the allow_extension_dial of this ReplaceMenuParams.

        :param allow_extension_dial: The allow_extension_dial of this ReplaceMenuParams.
        :type: bool
        """

        self._allow_extension_dial = allow_extension_dial

    @property
    def keypress_wait_time(self):
        """
        Gets the keypress_wait_time of this ReplaceMenuParams.

        :return: The keypress_wait_time of this ReplaceMenuParams.
        :rtype: int
        """
        return self._keypress_wait_time

    @keypress_wait_time.setter
    def keypress_wait_time(self, keypress_wait_time):
        """
        Sets the keypress_wait_time of this ReplaceMenuParams.

        :param keypress_wait_time: The keypress_wait_time of this ReplaceMenuParams.
        :type: int
        """

        self._keypress_wait_time = keypress_wait_time

    @property
    def timeout_handler(self):
        """
        Gets the timeout_handler of this ReplaceMenuParams.

        :return: The timeout_handler of this ReplaceMenuParams.
        :rtype: object
        """
        return self._timeout_handler

    @timeout_handler.setter
    def timeout_handler(self, timeout_handler):
        """
        Sets the timeout_handler of this ReplaceMenuParams.

        :param timeout_handler: The timeout_handler of this ReplaceMenuParams.
        :type: object
        """

        self._timeout_handler = timeout_handler

    @property
    def options(self):
        """
        Gets the options of this ReplaceMenuParams.

        :return: The options of this ReplaceMenuParams.
        :rtype: list[object]
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this ReplaceMenuParams.

        :param options: The options of this ReplaceMenuParams.
        :type: list[object]
        """

        self._options = options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReplaceMenuParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
