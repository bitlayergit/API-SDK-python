# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CreateMediaParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, name=None, origin=None, type=None, tts_voice=None, tts_text=None, is_temparary=None, expiration_date=None, duration=None, notes=None, randomized=None):
        """
        CreateMediaParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'origin': 'str',
            'type': 'str',
            'tts_voice': 'str',
            'tts_text': 'str',
            'is_temparary': 'str',
            'expiration_date': 'int',
            'duration': 'int',
            'notes': 'str',
            'randomized': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'origin': 'origin',
            'type': 'type',
            'tts_voice': 'tts_voice',
            'tts_text': 'tts_text',
            'is_temparary': 'is_temparary',
            'expiration_date': 'expiration_date',
            'duration': 'duration',
            'notes': 'notes',
            'randomized': 'randomized'
        }

        self._name = name
        self._origin = origin
        self._type = type
        self._tts_voice = tts_voice
        self._tts_text = tts_text
        self._is_temparary = is_temparary
        self._expiration_date = expiration_date
        self._duration = duration
        self._notes = notes
        self._randomized = randomized

    @property
    def name(self):
        """
        Gets the name of this CreateMediaParams.
        Name of media

        :return: The name of this CreateMediaParams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateMediaParams.
        Name of media

        :param name: The name of this CreateMediaParams.
        :type: str
        """

        self._name = name

    @property
    def origin(self):
        """
        Gets the origin of this CreateMediaParams.
        'tts', 'file'

        :return: The origin of this CreateMediaParams.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """
        Sets the origin of this CreateMediaParams.
        'tts', 'file'

        :param origin: The origin of this CreateMediaParams.
        :type: str
        """

        self._origin = origin

    @property
    def type(self):
        """
        Gets the type of this CreateMediaParams.
        'hold_music', 'greeting'

        :return: The type of this CreateMediaParams.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CreateMediaParams.
        'hold_music', 'greeting'

        :param type: The type of this CreateMediaParams.
        :type: str
        """

        self._type = type

    @property
    def tts_voice(self):
        """
        Gets the tts_voice of this CreateMediaParams.
        'allison', 'amy', 'belle', 'callie', 'callieq', 'dallas', 'damien', 'david', 'designerdave', 'diane', 'diesel', 'dog', 'duchess', 'duncan', 'emily', 'evilgenius', 'frank', 'french-fry', 'gregory', 'isabelle', 'jean-pierre', 'jerkface', 'katrin', 'kayla', 'kidaroo', 'lawrence', 'layo', 'linda', 'marta', 'matthias', 'miguel', 'millie', 'princess', 'ransomnote', 'robin', 'shouty', 'shygirl', 'tamika', 'tophat', 'vittoria', 'vixen', 'vlad', 'walter', 'whispery', 'william', 'wiseguy', 'zach'

        :return: The tts_voice of this CreateMediaParams.
        :rtype: str
        """
        return self._tts_voice

    @tts_voice.setter
    def tts_voice(self, tts_voice):
        """
        Sets the tts_voice of this CreateMediaParams.
        'allison', 'amy', 'belle', 'callie', 'callieq', 'dallas', 'damien', 'david', 'designerdave', 'diane', 'diesel', 'dog', 'duchess', 'duncan', 'emily', 'evilgenius', 'frank', 'french-fry', 'gregory', 'isabelle', 'jean-pierre', 'jerkface', 'katrin', 'kayla', 'kidaroo', 'lawrence', 'layo', 'linda', 'marta', 'matthias', 'miguel', 'millie', 'princess', 'ransomnote', 'robin', 'shouty', 'shygirl', 'tamika', 'tophat', 'vittoria', 'vixen', 'vlad', 'walter', 'whispery', 'william', 'wiseguy', 'zach'

        :param tts_voice: The tts_voice of this CreateMediaParams.
        :type: str
        """

        self._tts_voice = tts_voice

    @property
    def tts_text(self):
        """
        Gets the tts_text of this CreateMediaParams.
        Text used for text-to-speech conversion, maximum 800 characters

        :return: The tts_text of this CreateMediaParams.
        :rtype: str
        """
        return self._tts_text

    @tts_text.setter
    def tts_text(self, tts_text):
        """
        Sets the tts_text of this CreateMediaParams.
        Text used for text-to-speech conversion, maximum 800 characters

        :param tts_text: The tts_text of this CreateMediaParams.
        :type: str
        """

        self._tts_text = tts_text

    @property
    def is_temparary(self):
        """
        Gets the is_temparary of this CreateMediaParams.
        'Y', 'N'. Media file is temporary, will be deleted after a specified period.

        :return: The is_temparary of this CreateMediaParams.
        :rtype: str
        """
        return self._is_temparary

    @is_temparary.setter
    def is_temparary(self, is_temparary):
        """
        Sets the is_temparary of this CreateMediaParams.
        'Y', 'N'. Media file is temporary, will be deleted after a specified period.

        :param is_temparary: The is_temparary of this CreateMediaParams.
        :type: str
        """

        self._is_temparary = is_temparary

    @property
    def expiration_date(self):
        """
        Gets the expiration_date of this CreateMediaParams.
        If is_temporary is 'Y', media will be deleted after the specified time in seconds

        :return: The expiration_date of this CreateMediaParams.
        :rtype: int
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """
        Sets the expiration_date of this CreateMediaParams.
        If is_temporary is 'Y', media will be deleted after the specified time in seconds

        :param expiration_date: The expiration_date of this CreateMediaParams.
        :type: int
        """

        self._expiration_date = expiration_date

    @property
    def duration(self):
        """
        Gets the duration of this CreateMediaParams.
        Length of media in seconds

        :return: The duration of this CreateMediaParams.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this CreateMediaParams.
        Length of media in seconds

        :param duration: The duration of this CreateMediaParams.
        :type: int
        """

        self._duration = duration

    @property
    def notes(self):
        """
        Gets the notes of this CreateMediaParams.
        Notes about the media object

        :return: The notes of this CreateMediaParams.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this CreateMediaParams.
        Notes about the media object

        :param notes: The notes of this CreateMediaParams.
        :type: str
        """

        self._notes = notes

    @property
    def randomized(self):
        """
        Gets the randomized of this CreateMediaParams.
        'Y', 'N'. Start playing the media file in random location, instead of from the beginning

        :return: The randomized of this CreateMediaParams.
        :rtype: str
        """
        return self._randomized

    @randomized.setter
    def randomized(self, randomized):
        """
        Sets the randomized of this CreateMediaParams.
        'Y', 'N'. Start playing the media file in random location, instead of from the beginning

        :param randomized: The randomized of this CreateMediaParams.
        :type: str
        """

        self._randomized = randomized

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CreateMediaParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
