# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class QueueFull(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, greeting=None, hold_music=None, max_hold_time=None, caller_id_type=None, ring_time=None, members=None):
        """
        QueueFull - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'name': 'str',
            'greeting': 'MediaSummary',
            'hold_music': 'HoldMusic',
            'max_hold_time': 'int',
            'caller_id_type': 'str',
            'ring_time': 'int',
            'members': 'list[Member]'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'greeting': 'greeting',
            'hold_music': 'hold_music',
            'max_hold_time': 'max_hold_time',
            'caller_id_type': 'caller_id_type',
            'ring_time': 'ring_time',
            'members': 'members'
        }

        self._id = id
        self._name = name
        self._greeting = greeting
        self._hold_music = hold_music
        self._max_hold_time = max_hold_time
        self._caller_id_type = caller_id_type
        self._ring_time = ring_time
        self._members = members

    @property
    def id(self):
        """
        Gets the id of this QueueFull.
        Integer ID. Read-only.

        :return: The id of this QueueFull.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this QueueFull.
        Integer ID. Read-only.

        :param id: The id of this QueueFull.
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this QueueFull.
        Name. Required.

        :return: The name of this QueueFull.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this QueueFull.
        Name. Required.

        :param name: The name of this QueueFull.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def greeting(self):
        """
        Gets the greeting of this QueueFull.
        Greeting to be played when caller first connects. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE. Can be set to NULL to disable the greeting.

        :return: The greeting of this QueueFull.
        :rtype: MediaSummary
        """
        return self._greeting

    @greeting.setter
    def greeting(self, greeting):
        """
        Sets the greeting of this QueueFull.
        Greeting to be played when caller first connects. Output is a Media Summary Object. Input must be a Media Lookup Object. Must refer to a media recording that has is_hold_music set to FALSE. Can be set to NULL to disable the greeting.

        :param greeting: The greeting of this QueueFull.
        :type: MediaSummary
        """

        self._greeting = greeting

    @property
    def hold_music(self):
        """
        Gets the hold_music of this QueueFull.

        :return: The hold_music of this QueueFull.
        :rtype: HoldMusic
        """
        return self._hold_music

    @hold_music.setter
    def hold_music(self, hold_music):
        """
        Sets the hold_music of this QueueFull.

        :param hold_music: The hold_music of this QueueFull.
        :type: HoldMusic
        """

        self._hold_music = hold_music

    @property
    def max_hold_time(self):
        """
        Gets the max_hold_time of this QueueFull.
        Maximum hold time in seconds. If provided, must equal one of: 60, 120, 180, 240, 300, 600, 900, 1200, 1800, 2700, 3600. Default is 300.

        :return: The max_hold_time of this QueueFull.
        :rtype: int
        """
        return self._max_hold_time

    @max_hold_time.setter
    def max_hold_time(self, max_hold_time):
        """
        Sets the max_hold_time of this QueueFull.
        Maximum hold time in seconds. If provided, must equal one of: 60, 120, 180, 240, 300, 600, 900, 1200, 1800, 2700, 3600. Default is 300.

        :param max_hold_time: The max_hold_time of this QueueFull.
        :type: int
        """

        self._max_hold_time = max_hold_time

    @property
    def caller_id_type(self):
        """
        Gets the caller_id_type of this QueueFull.
        Caller id type to show members. If provided, must equal one of: 'called_number', 'calling_number'. Default is 'calling_number'.

        :return: The caller_id_type of this QueueFull.
        :rtype: str
        """
        return self._caller_id_type

    @caller_id_type.setter
    def caller_id_type(self, caller_id_type):
        """
        Sets the caller_id_type of this QueueFull.
        Caller id type to show members. If provided, must equal one of: 'called_number', 'calling_number'. Default is 'calling_number'.

        :param caller_id_type: The caller_id_type of this QueueFull.
        :type: str
        """

        self._caller_id_type = caller_id_type

    @property
    def ring_time(self):
        """
        Gets the ring_time of this QueueFull.
        Number of seconds to ring a member before cycling to the next member. If provided, must equal one of: 5, 10, 15, 20, 25, 30. Default is 5.

        :return: The ring_time of this QueueFull.
        :rtype: int
        """
        return self._ring_time

    @ring_time.setter
    def ring_time(self, ring_time):
        """
        Sets the ring_time of this QueueFull.
        Number of seconds to ring a member before cycling to the next member. If provided, must equal one of: 5, 10, 15, 20, 25, 30. Default is 5.

        :param ring_time: The ring_time of this QueueFull.
        :type: int
        """

        self._ring_time = ring_time

    @property
    def members(self):
        """
        Gets the members of this QueueFull.
        Array of Member Objects. Non-virtual account extensions or phone numbers. See below for details.

        :return: The members of this QueueFull.
        :rtype: list[Member]
        """
        return self._members

    @members.setter
    def members(self, members):
        """
        Sets the members of this QueueFull.
        Array of Member Objects. Non-virtual account extensions or phone numbers. See below for details.

        :param members: The members of this QueueFull.
        :type: list[Member]
        """

        self._members = members

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, QueueFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
