# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CallbackObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'role': 'str',
        'verb': 'str',
        'username': 'str',
        'password': 'str',
        'timeout': 'int'
    }

    attribute_map = {
        'url': 'url',
        'role': 'role',
        'verb': 'verb',
        'username': 'username',
        'password': 'password',
        'timeout': 'timeout'
    }

    def __init__(self, url=None, role=None, verb=None, username=None, password=None, timeout=None):
        """
        CallbackObject - a model defined in Swagger
        """

        self._url = None
        self._role = None
        self._verb = None
        self._username = None
        self._password = None
        self._timeout = None

        if url is not None:
          self.url = url
        if role is not None:
          self.role = role
        if verb is not None:
          self.verb = verb
        if username is not None:
          self.username = username
        if password is not None:
          self.password = password
        if timeout is not None:
          self.timeout = timeout

    @property
    def url(self):
        """
        Gets the url of this CallbackObject.
        URL of webhook, where the event is emitted to. Note: The listener supports both HTTP & HTTPS, we highly recommend that users use HTTPS on all callbacks (with user name and password) to ensure no one may send malicious events pretending to be Phone.com.

        :return: The url of this CallbackObject.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this CallbackObject.
        URL of webhook, where the event is emitted to. Note: The listener supports both HTTP & HTTPS, we highly recommend that users use HTTPS on all callbacks (with user name and password) to ensure no one may send malicious events pretending to be Phone.com.

        :param url: The url of this CallbackObject.
        :type: str
        """

        self._url = url

    @property
    def role(self):
        """
        Gets the role of this CallbackObject.
        Role of callback: main or backup

        :return: The role of this CallbackObject.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this CallbackObject.
        Role of callback: main or backup

        :param role: The role of this CallbackObject.
        :type: str
        """

        self._role = role

    @property
    def verb(self):
        """
        Gets the verb of this CallbackObject.
        HTTP method: get or post

        :return: The verb of this CallbackObject.
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """
        Sets the verb of this CallbackObject.
        HTTP method: get or post

        :param verb: The verb of this CallbackObject.
        :type: str
        """

        self._verb = verb

    @property
    def username(self):
        """
        Gets the username of this CallbackObject.
        Optional user name needed to logon to the webhook URL

        :return: The username of this CallbackObject.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this CallbackObject.
        Optional user name needed to logon to the webhook URL

        :param username: The username of this CallbackObject.
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """
        Gets the password of this CallbackObject.
        Optional password needed to logon to the webhook URL

        :return: The password of this CallbackObject.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this CallbackObject.
        Optional password needed to logon to the webhook URL

        :param password: The password of this CallbackObject.
        :type: str
        """

        self._password = password

    @property
    def timeout(self):
        """
        Gets the timeout of this CallbackObject.
        Optional : Duration of HTTP response will time out while sending the event to the callback URL. (1 - 10 seconds)

        :return: The timeout of this CallbackObject.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """
        Sets the timeout of this CallbackObject.
        Optional : Duration of HTTP response will time out while sending the event to the callback URL. (1 - 10 seconds)

        :param timeout: The timeout of this CallbackObject.
        :type: int
        """

        self._timeout = timeout

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CallbackObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
