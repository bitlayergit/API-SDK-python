# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CallLogFull(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'uuid': 'str',
        'extension': 'ExtensionSummary',
        'caller_id': 'str',
        'called_number': 'str',
        'start_time': 'str',
        'created_at': 'str',
        'direction': 'str',
        'type': 'str',
        'call_duration': 'int',
        'is_monitored': 'str',
        'call_number': 'str',
        'final_action': 'str',
        'voicemail_url': 'str',
        'voicemail_cp_url': 'str',
        'voicemail_transcript': 'str',
        'call_recording_url': 'str',
        'call_recording_cp_url': 'str',
        'details': 'list[CallDetails]',
        'caller_cnam': 'str'
    }

    attribute_map = {
        'id': 'id',
        'uuid': 'uuid',
        'extension': 'extension',
        'caller_id': 'caller_id',
        'called_number': 'called_number',
        'start_time': 'start_time',
        'created_at': 'created_at',
        'direction': 'direction',
        'type': 'type',
        'call_duration': 'call_duration',
        'is_monitored': 'is_monitored',
        'call_number': 'call_number',
        'final_action': 'final_action',
        'voicemail_url': 'voicemail_url',
        'voicemail_cp_url': 'voicemail_cp_url',
        'voicemail_transcript': 'voicemail_transcript',
        'call_recording_url': 'call_recording_url',
        'call_recording_cp_url': 'call_recording_cp_url',
        'details': 'details',
        'caller_cnam': 'caller_cnam'
    }

    def __init__(self, id=None, uuid=None, extension=None, caller_id=None, called_number=None, start_time=None, created_at=None, direction=None, type=None, call_duration=None, is_monitored=None, call_number=None, final_action=None, voicemail_url=None, voicemail_cp_url=None, voicemail_transcript=None, call_recording_url=None, call_recording_cp_url=None, details=None, caller_cnam=None):
        """
        CallLogFull - a model defined in Swagger
        """

        self._id = None
        self._uuid = None
        self._extension = None
        self._caller_id = None
        self._called_number = None
        self._start_time = None
        self._created_at = None
        self._direction = None
        self._type = None
        self._call_duration = None
        self._is_monitored = None
        self._call_number = None
        self._final_action = None
        self._voicemail_url = None
        self._voicemail_cp_url = None
        self._voicemail_transcript = None
        self._call_recording_url = None
        self._call_recording_cp_url = None
        self._details = None
        self._caller_cnam = None

        if id is not None:
          self.id = id
        if uuid is not None:
          self.uuid = uuid
        if extension is not None:
          self.extension = extension
        if caller_id is not None:
          self.caller_id = caller_id
        if called_number is not None:
          self.called_number = called_number
        if start_time is not None:
          self.start_time = start_time
        if created_at is not None:
          self.created_at = created_at
        if direction is not None:
          self.direction = direction
        if type is not None:
          self.type = type
        if call_duration is not None:
          self.call_duration = call_duration
        if is_monitored is not None:
          self.is_monitored = is_monitored
        if call_number is not None:
          self.call_number = call_number
        if final_action is not None:
          self.final_action = final_action
        if voicemail_url is not None:
          self.voicemail_url = voicemail_url
        if voicemail_cp_url is not None:
          self.voicemail_cp_url = voicemail_cp_url
        if voicemail_transcript is not None:
          self.voicemail_transcript = voicemail_transcript
        if call_recording_url is not None:
          self.call_recording_url = call_recording_url
        if call_recording_cp_url is not None:
          self.call_recording_cp_url = call_recording_cp_url
        if details is not None:
          self.details = details
        if caller_cnam is not None:
          self.caller_cnam = caller_cnam

    @property
    def id(self):
        """
        Gets the id of this CallLogFull.
        ID

        :return: The id of this CallLogFull.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CallLogFull.
        ID

        :param id: The id of this CallLogFull.
        :type: str
        """

        self._id = id

    @property
    def uuid(self):
        """
        Gets the uuid of this CallLogFull.
        Internal system id, may be null

        :return: The uuid of this CallLogFull.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this CallLogFull.
        Internal system id, may be null

        :param uuid: The uuid of this CallLogFull.
        :type: str
        """

        self._uuid = uuid

    @property
    def extension(self):
        """
        Gets the extension of this CallLogFull.
        Account extension

        :return: The extension of this CallLogFull.
        :rtype: ExtensionSummary
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """
        Sets the extension of this CallLogFull.
        Account extension

        :param extension: The extension of this CallLogFull.
        :type: ExtensionSummary
        """

        self._extension = extension

    @property
    def caller_id(self):
        """
        Gets the caller_id of this CallLogFull.
        Call made from this phone number

        :return: The caller_id of this CallLogFull.
        :rtype: str
        """
        return self._caller_id

    @caller_id.setter
    def caller_id(self, caller_id):
        """
        Sets the caller_id of this CallLogFull.
        Call made from this phone number

        :param caller_id: The caller_id of this CallLogFull.
        :type: str
        """

        self._caller_id = caller_id

    @property
    def called_number(self):
        """
        Gets the called_number of this CallLogFull.
        Call made to this phone number

        :return: The called_number of this CallLogFull.
        :rtype: str
        """
        return self._called_number

    @called_number.setter
    def called_number(self, called_number):
        """
        Sets the called_number of this CallLogFull.
        Call made to this phone number

        :param called_number: The called_number of this CallLogFull.
        :type: str
        """

        self._called_number = called_number

    @property
    def start_time(self):
        """
        Gets the start_time of this CallLogFull.
        Call start time

        :return: The start_time of this CallLogFull.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this CallLogFull.
        Call start time

        :param start_time: The start_time of this CallLogFull.
        :type: str
        """

        self._start_time = start_time

    @property
    def created_at(self):
        """
        Gets the created_at of this CallLogFull.
        Call log creation time. Same as call end time + time needed to create call log

        :return: The created_at of this CallLogFull.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this CallLogFull.
        Call log creation time. Same as call end time + time needed to create call log

        :param created_at: The created_at of this CallLogFull.
        :type: str
        """

        self._created_at = created_at

    @property
    def direction(self):
        """
        Gets the direction of this CallLogFull.
        Call direction: in or out

        :return: The direction of this CallLogFull.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """
        Sets the direction of this CallLogFull.
        Call direction: in or out

        :param direction: The direction of this CallLogFull.
        :type: str
        """

        self._direction = direction

    @property
    def type(self):
        """
        Gets the type of this CallLogFull.
        Call type: call, fax, audiogram ...

        :return: The type of this CallLogFull.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this CallLogFull.
        Call type: call, fax, audiogram ...

        :param type: The type of this CallLogFull.
        :type: str
        """

        self._type = type

    @property
    def call_duration(self):
        """
        Gets the call_duration of this CallLogFull.
        Call duration in seconds

        :return: The call_duration of this CallLogFull.
        :rtype: int
        """
        return self._call_duration

    @call_duration.setter
    def call_duration(self, call_duration):
        """
        Sets the call_duration of this CallLogFull.
        Call duration in seconds

        :param call_duration: The call_duration of this CallLogFull.
        :type: int
        """

        self._call_duration = call_duration

    @property
    def is_monitored(self):
        """
        Gets the is_monitored of this CallLogFull.
        Was call being monitored?

        :return: The is_monitored of this CallLogFull.
        :rtype: str
        """
        return self._is_monitored

    @is_monitored.setter
    def is_monitored(self, is_monitored):
        """
        Sets the is_monitored of this CallLogFull.
        Was call being monitored?

        :param is_monitored: The is_monitored of this CallLogFull.
        :type: str
        """

        self._is_monitored = is_monitored

    @property
    def call_number(self):
        """
        Gets the call_number of this CallLogFull.
        Internal system call reference number

        :return: The call_number of this CallLogFull.
        :rtype: str
        """
        return self._call_number

    @call_number.setter
    def call_number(self, call_number):
        """
        Sets the call_number of this CallLogFull.
        Internal system call reference number

        :param call_number: The call_number of this CallLogFull.
        :type: str
        """

        self._call_number = call_number

    @property
    def final_action(self):
        """
        Gets the final_action of this CallLogFull.
        Last action of call flow

        :return: The final_action of this CallLogFull.
        :rtype: str
        """
        return self._final_action

    @final_action.setter
    def final_action(self, final_action):
        """
        Sets the final_action of this CallLogFull.
        Last action of call flow

        :param final_action: The final_action of this CallLogFull.
        :type: str
        """

        self._final_action = final_action

    @property
    def voicemail_url(self):
        """
        Gets the voicemail_url of this CallLogFull.
        URL of voicemail if available. User may download the audio via this URL. Empty string if voicemail does not exist

        :return: The voicemail_url of this CallLogFull.
        :rtype: str
        """
        return self._voicemail_url

    @voicemail_url.setter
    def voicemail_url(self, voicemail_url):
        """
        Sets the voicemail_url of this CallLogFull.
        URL of voicemail if available. User may download the audio via this URL. Empty string if voicemail does not exist

        :param voicemail_url: The voicemail_url of this CallLogFull.
        :type: str
        """

        self._voicemail_url = voicemail_url

    @property
    def voicemail_cp_url(self):
        """
        Gets the voicemail_cp_url of this CallLogFull.
        URL of voicemail if available. User may listen to the audio online via this URL. Empty string if voicemail does not exist

        :return: The voicemail_cp_url of this CallLogFull.
        :rtype: str
        """
        return self._voicemail_cp_url

    @voicemail_cp_url.setter
    def voicemail_cp_url(self, voicemail_cp_url):
        """
        Sets the voicemail_cp_url of this CallLogFull.
        URL of voicemail if available. User may listen to the audio online via this URL. Empty string if voicemail does not exist

        :param voicemail_cp_url: The voicemail_cp_url of this CallLogFull.
        :type: str
        """

        self._voicemail_cp_url = voicemail_cp_url

    @property
    def voicemail_transcript(self):
        """
        Gets the voicemail_transcript of this CallLogFull.
        Transcript of voicemail if enabled and available

        :return: The voicemail_transcript of this CallLogFull.
        :rtype: str
        """
        return self._voicemail_transcript

    @voicemail_transcript.setter
    def voicemail_transcript(self, voicemail_transcript):
        """
        Sets the voicemail_transcript of this CallLogFull.
        Transcript of voicemail if enabled and available

        :param voicemail_transcript: The voicemail_transcript of this CallLogFull.
        :type: str
        """

        self._voicemail_transcript = voicemail_transcript

    @property
    def call_recording_url(self):
        """
        Gets the call_recording_url of this CallLogFull.
        URL of call recording if available. User may download the audio via this URL. Empty string if call recording does not exist

        :return: The call_recording_url of this CallLogFull.
        :rtype: str
        """
        return self._call_recording_url

    @call_recording_url.setter
    def call_recording_url(self, call_recording_url):
        """
        Sets the call_recording_url of this CallLogFull.
        URL of call recording if available. User may download the audio via this URL. Empty string if call recording does not exist

        :param call_recording_url: The call_recording_url of this CallLogFull.
        :type: str
        """

        self._call_recording_url = call_recording_url

    @property
    def call_recording_cp_url(self):
        """
        Gets the call_recording_cp_url of this CallLogFull.
        URL of call recording if available. User may listen to the audio online via this URL. Empty string if call recording does not exist

        :return: The call_recording_cp_url of this CallLogFull.
        :rtype: str
        """
        return self._call_recording_cp_url

    @call_recording_cp_url.setter
    def call_recording_cp_url(self, call_recording_cp_url):
        """
        Sets the call_recording_cp_url of this CallLogFull.
        URL of call recording if available. User may listen to the audio online via this URL. Empty string if call recording does not exist

        :param call_recording_cp_url: The call_recording_cp_url of this CallLogFull.
        :type: str
        """

        self._call_recording_cp_url = call_recording_cp_url

    @property
    def details(self):
        """
        Gets the details of this CallLogFull.
        A list of call flows from beginning of call to end of call.

        :return: The details of this CallLogFull.
        :rtype: list[CallDetails]
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this CallLogFull.
        A list of call flows from beginning of call to end of call.

        :param details: The details of this CallLogFull.
        :type: list[CallDetails]
        """

        self._details = details

    @property
    def caller_cnam(self):
        """
        Gets the caller_cnam of this CallLogFull.
        Internal system caller id / name

        :return: The caller_cnam of this CallLogFull.
        :rtype: str
        """
        return self._caller_cnam

    @caller_cnam.setter
    def caller_cnam(self, caller_cnam):
        """
        Sets the caller_cnam of this CallLogFull.
        Internal system caller id / name

        :param caller_cnam: The caller_cnam of this CallLogFull.
        :type: str
        """

        self._caller_cnam = caller_cnam

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CallLogFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
