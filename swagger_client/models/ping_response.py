# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PingResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, datetime=None, remote_ip=None, timestamp=None, user_agent=None):
        """
        PingResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'datetime': 'str',
            'remote_ip': 'str',
            'timestamp': 'int',
            'user_agent': 'str'
        }

        self.attribute_map = {
            'datetime': 'datetime',
            'remote_ip': 'remote_ip',
            'timestamp': 'timestamp',
            'user_agent': 'user_agent'
        }

        self._datetime = datetime
        self._remote_ip = remote_ip
        self._timestamp = timestamp
        self._user_agent = user_agent

    @property
    def datetime(self):
        """
        Gets the datetime of this PingResponse.

        :return: The datetime of this PingResponse.
        :rtype: str
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """
        Sets the datetime of this PingResponse.

        :param datetime: The datetime of this PingResponse.
        :type: str
        """

        self._datetime = datetime

    @property
    def remote_ip(self):
        """
        Gets the remote_ip of this PingResponse.

        :return: The remote_ip of this PingResponse.
        :rtype: str
        """
        return self._remote_ip

    @remote_ip.setter
    def remote_ip(self, remote_ip):
        """
        Sets the remote_ip of this PingResponse.

        :param remote_ip: The remote_ip of this PingResponse.
        :type: str
        """

        self._remote_ip = remote_ip

    @property
    def timestamp(self):
        """
        Gets the timestamp of this PingResponse.

        :return: The timestamp of this PingResponse.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """
        Sets the timestamp of this PingResponse.

        :param timestamp: The timestamp of this PingResponse.
        :type: int
        """

        self._timestamp = timestamp

    @property
    def user_agent(self):
        """
        Gets the user_agent of this PingResponse.

        :return: The user_agent of this PingResponse.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """
        Sets the user_agent of this PingResponse.

        :param user_agent: The user_agent of this PingResponse.
        :type: str
        """

        self._user_agent = user_agent

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PingResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
