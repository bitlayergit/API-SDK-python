# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class GetOauthAccessToken(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scope': 'str',
        'expires_at': 'int',
        'scope_details': 'list[ScopeDetails]'
    }

    attribute_map = {
        'scope': 'scope',
        'expires_at': 'expires_at',
        'scope_details': 'scope_details'
    }

    def __init__(self, scope=None, expires_at=None, scope_details=None):
        """
        GetOauthAccessToken - a model defined in Swagger
        """

        self._scope = None
        self._expires_at = None
        self._scope_details = None

        if scope is not None:
          self.scope = scope
        if expires_at is not None:
          self.expires_at = expires_at
        if scope_details is not None:
          self.scope_details = scope_details

    @property
    def scope(self):
        """
        Gets the scope of this GetOauthAccessToken.

        :return: The scope of this GetOauthAccessToken.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this GetOauthAccessToken.

        :param scope: The scope of this GetOauthAccessToken.
        :type: str
        """

        self._scope = scope

    @property
    def expires_at(self):
        """
        Gets the expires_at of this GetOauthAccessToken.

        :return: The expires_at of this GetOauthAccessToken.
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """
        Sets the expires_at of this GetOauthAccessToken.

        :param expires_at: The expires_at of this GetOauthAccessToken.
        :type: int
        """

        self._expires_at = expires_at

    @property
    def scope_details(self):
        """
        Gets the scope_details of this GetOauthAccessToken.

        :return: The scope_details of this GetOauthAccessToken.
        :rtype: list[ScopeDetails]
        """
        return self._scope_details

    @scope_details.setter
    def scope_details(self, scope_details):
        """
        Sets the scope_details of this GetOauthAccessToken.

        :param scope_details: The scope_details of this GetOauthAccessToken.
        :type: list[ScopeDetails]
        """

        self._scope_details = scope_details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, GetOauthAccessToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
