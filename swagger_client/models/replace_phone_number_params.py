# coding: utf-8

"""
    Phone.com API

    This is a Phone.com api Swagger definition

    OpenAPI spec version: 1.0.0
    Contact: apisupport@phone.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ReplacePhoneNumberParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, route=None, name=None, block_incoming=None, block_anonymous=None, caller_id_name=None, caller_id_type=None, sms_forwarding_type=None, sms_forwarding_application=None, sms_forwarding_extension=None, pool_item=None, call_notifications_emails=None, call_notifications_sms=None):
        """
        ReplacePhoneNumberParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'route': 'object',
            'name': 'str',
            'block_incoming': 'bool',
            'block_anonymous': 'bool',
            'caller_id_name': 'str',
            'caller_id_type': 'str',
            'sms_forwarding_type': 'str',
            'sms_forwarding_application': 'object',
            'sms_forwarding_extension': 'object',
            'pool_item': 'object',
            'call_notifications_emails': 'list[str]',
            'call_notifications_sms': 'str'
        }

        self.attribute_map = {
            'route': 'route',
            'name': 'name',
            'block_incoming': 'block_incoming',
            'block_anonymous': 'block_anonymous',
            'caller_id_name': 'caller_id[name]',
            'caller_id_type': 'caller_id[type]',
            'sms_forwarding_type': 'sms_forwarding[type]',
            'sms_forwarding_application': 'sms_forwarding[application]',
            'sms_forwarding_extension': 'sms_forwarding[extension]',
            'pool_item': 'pool_item',
            'call_notifications_emails': 'call_notifications[emails]',
            'call_notifications_sms': 'call_notifications[sms]'
        }

        self._route = route
        self._name = name
        self._block_incoming = block_incoming
        self._block_anonymous = block_anonymous
        self._caller_id_name = caller_id_name
        self._caller_id_type = caller_id_type
        self._sms_forwarding_type = sms_forwarding_type
        self._sms_forwarding_application = sms_forwarding_application
        self._sms_forwarding_extension = sms_forwarding_extension
        self._pool_item = pool_item
        self._call_notifications_emails = call_notifications_emails
        self._call_notifications_sms = call_notifications_sms

    @property
    def route(self):
        """
        Gets the route of this ReplacePhoneNumberParams.
        Route lookup object

        :return: The route of this ReplacePhoneNumberParams.
        :rtype: object
        """
        return self._route

    @route.setter
    def route(self, route):
        """
        Sets the route of this ReplacePhoneNumberParams.
        Route lookup object

        :param route: The route of this ReplacePhoneNumberParams.
        :type: object
        """

        self._route = route

    @property
    def name(self):
        """
        Gets the name of this ReplacePhoneNumberParams.
        Phone Name

        :return: The name of this ReplacePhoneNumberParams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ReplacePhoneNumberParams.
        Phone Name

        :param name: The name of this ReplacePhoneNumberParams.
        :type: str
        """

        self._name = name

    @property
    def block_incoming(self):
        """
        Gets the block_incoming of this ReplacePhoneNumberParams.
        Block incoming calls

        :return: The block_incoming of this ReplacePhoneNumberParams.
        :rtype: bool
        """
        return self._block_incoming

    @block_incoming.setter
    def block_incoming(self, block_incoming):
        """
        Sets the block_incoming of this ReplacePhoneNumberParams.
        Block incoming calls

        :param block_incoming: The block_incoming of this ReplacePhoneNumberParams.
        :type: bool
        """

        self._block_incoming = block_incoming

    @property
    def block_anonymous(self):
        """
        Gets the block_anonymous of this ReplacePhoneNumberParams.
        Block anonymous calls

        :return: The block_anonymous of this ReplacePhoneNumberParams.
        :rtype: bool
        """
        return self._block_anonymous

    @block_anonymous.setter
    def block_anonymous(self, block_anonymous):
        """
        Sets the block_anonymous of this ReplacePhoneNumberParams.
        Block anonymous calls

        :param block_anonymous: The block_anonymous of this ReplacePhoneNumberParams.
        :type: bool
        """

        self._block_anonymous = block_anonymous

    @property
    def caller_id_name(self):
        """
        Gets the caller_id_name of this ReplacePhoneNumberParams.
        Caller ID name

        :return: The caller_id_name of this ReplacePhoneNumberParams.
        :rtype: str
        """
        return self._caller_id_name

    @caller_id_name.setter
    def caller_id_name(self, caller_id_name):
        """
        Sets the caller_id_name of this ReplacePhoneNumberParams.
        Caller ID name

        :param caller_id_name: The caller_id_name of this ReplacePhoneNumberParams.
        :type: str
        """

        self._caller_id_name = caller_id_name

    @property
    def caller_id_type(self):
        """
        Gets the caller_id_type of this ReplacePhoneNumberParams.
        Caller ID type

        :return: The caller_id_type of this ReplacePhoneNumberParams.
        :rtype: str
        """
        return self._caller_id_type

    @caller_id_type.setter
    def caller_id_type(self, caller_id_type):
        """
        Sets the caller_id_type of this ReplacePhoneNumberParams.
        Caller ID type

        :param caller_id_type: The caller_id_type of this ReplacePhoneNumberParams.
        :type: str
        """

        self._caller_id_type = caller_id_type

    @property
    def sms_forwarding_type(self):
        """
        Gets the sms_forwarding_type of this ReplacePhoneNumberParams.
        'application' or 'extension'

        :return: The sms_forwarding_type of this ReplacePhoneNumberParams.
        :rtype: str
        """
        return self._sms_forwarding_type

    @sms_forwarding_type.setter
    def sms_forwarding_type(self, sms_forwarding_type):
        """
        Sets the sms_forwarding_type of this ReplacePhoneNumberParams.
        'application' or 'extension'

        :param sms_forwarding_type: The sms_forwarding_type of this ReplacePhoneNumberParams.
        :type: str
        """

        self._sms_forwarding_type = sms_forwarding_type

    @property
    def sms_forwarding_application(self):
        """
        Gets the sms_forwarding_application of this ReplacePhoneNumberParams.
        Application lookup object

        :return: The sms_forwarding_application of this ReplacePhoneNumberParams.
        :rtype: object
        """
        return self._sms_forwarding_application

    @sms_forwarding_application.setter
    def sms_forwarding_application(self, sms_forwarding_application):
        """
        Sets the sms_forwarding_application of this ReplacePhoneNumberParams.
        Application lookup object

        :param sms_forwarding_application: The sms_forwarding_application of this ReplacePhoneNumberParams.
        :type: object
        """

        self._sms_forwarding_application = sms_forwarding_application

    @property
    def sms_forwarding_extension(self):
        """
        Gets the sms_forwarding_extension of this ReplacePhoneNumberParams.
        Extension lookup object

        :return: The sms_forwarding_extension of this ReplacePhoneNumberParams.
        :rtype: object
        """
        return self._sms_forwarding_extension

    @sms_forwarding_extension.setter
    def sms_forwarding_extension(self, sms_forwarding_extension):
        """
        Sets the sms_forwarding_extension of this ReplacePhoneNumberParams.
        Extension lookup object

        :param sms_forwarding_extension: The sms_forwarding_extension of this ReplacePhoneNumberParams.
        :type: object
        """

        self._sms_forwarding_extension = sms_forwarding_extension

    @property
    def pool_item(self):
        """
        Gets the pool_item of this ReplacePhoneNumberParams.
        Pool lookup object

        :return: The pool_item of this ReplacePhoneNumberParams.
        :rtype: object
        """
        return self._pool_item

    @pool_item.setter
    def pool_item(self, pool_item):
        """
        Sets the pool_item of this ReplacePhoneNumberParams.
        Pool lookup object

        :param pool_item: The pool_item of this ReplacePhoneNumberParams.
        :type: object
        """

        self._pool_item = pool_item

    @property
    def call_notifications_emails(self):
        """
        Gets the call_notifications_emails of this ReplacePhoneNumberParams.
        Call notifications for emails. Can be a single email or an array of emails

        :return: The call_notifications_emails of this ReplacePhoneNumberParams.
        :rtype: list[str]
        """
        return self._call_notifications_emails

    @call_notifications_emails.setter
    def call_notifications_emails(self, call_notifications_emails):
        """
        Sets the call_notifications_emails of this ReplacePhoneNumberParams.
        Call notifications for emails. Can be a single email or an array of emails

        :param call_notifications_emails: The call_notifications_emails of this ReplacePhoneNumberParams.
        :type: list[str]
        """

        self._call_notifications_emails = call_notifications_emails

    @property
    def call_notifications_sms(self):
        """
        Gets the call_notifications_sms of this ReplacePhoneNumberParams.
        Call notification for SMS

        :return: The call_notifications_sms of this ReplacePhoneNumberParams.
        :rtype: str
        """
        return self._call_notifications_sms

    @call_notifications_sms.setter
    def call_notifications_sms(self, call_notifications_sms):
        """
        Sets the call_notifications_sms of this ReplacePhoneNumberParams.
        Call notification for SMS

        :param call_notifications_sms: The call_notifications_sms of this ReplacePhoneNumberParams.
        :type: str
        """

        self._call_notifications_sms = call_notifications_sms

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ReplacePhoneNumberParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
